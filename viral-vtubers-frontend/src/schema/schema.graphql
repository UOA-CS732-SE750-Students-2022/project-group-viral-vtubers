schema {
  query: Query
  mutation: Mutation
}
"The Short scalar type represents a signed 16-bit numeric non-fractional value"
scalar Short
"The Long scalar type represents a signed 64-bit numeric non-fractional value"
scalar Long
""
scalar DateTime
"User"
type User {
  bio: String!
  displayName: String!
  email: String!
  id: ID!
  numCompletedCommissions: Int!
  profileImageURI: String!
  services: [Service!]!
  status: String!
  isFollowing: Boolean!
  tags: [Tag!]!
  products: [Product!]!
  inbox: [Mail!]!
  sent: [Mail!]!
  following: [User!]!
  followers: [User!]!
  numLikes: Int!
  likedProduct: [Product!]!
}
""
type Service {
  description: String!
  id: ID!
  name: String!
  price: Float!
  priceType: PriceEnum!
}
""
type Tag {
  backgroundColor: String!
  color: String!
  id: ID!
  name: String!
}
"Product"
type Product {
  description: String!
  id: ID!
  images: [String!]!
  minPrice: Float!
  name: String!
  titleImage: String!
  variants: [ProductVariant!]!
  vrm: String!
  tags: [Tag!]!
  subcategory: Subcategory!
  artist: User!
  isLiked: Boolean!
  numLikes: Int!
}
"Product Variant"
type ProductVariant {
  file: String!
  fileTypes: [String!]!
  id: ID!
  name: String!
  price: Float!
  product: Product!
}
"Category"
type Subcategory {
  id: ID!
  name: String!
  category: Category!
  products(filter: ProductFilter, sort: ProductSort, cursor: String, limit: Int): ProductPagination!
}
"Category"
type Category {
  id: ID!
  name: String!
  subcategories: [Subcategory!]!
  products(filter: ProductFilter, sort: ProductSort, cursor: String, limit: Int): ProductPagination!
}
""
type ProductPagination {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}
""
type ProductEdge {
  cursor: String!
  node: Product!
}
""
type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
}
"Mail"
type Mail {
  body: String!
  date: DateTime!
  id: ID!
  isRead: Boolean!
  title: String!
  sender: User!
  receiver: User!
}
"Order"
type Order {
  bounty: Float!
  description: String!
  id: ID!
  image: String!
  isDraft: Boolean!
  name: String!
  owner: User!
  artist: User
  tags: [Tag!]!
  applications: [User!]!
}
"Cart"
type Cart {
  numItems: Int!
  totalAmount: Float!
  seller: User!
  items: [ProductVariant!]!
}
"Purchase"
type Purchase {
  id: ID!
  numItems: Int!
  placed: DateTime!
  totalAmount: Float!
  seller: User!
  items: [ProductVariant!]!
}
""
type UserPagination {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}
""
type UserEdge {
  cursor: String!
  node: User!
}
""
type OrderPagination {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
}
""
type OrderEdge {
  cursor: String!
  node: Order!
}
""
type MyOrder {
  active: [Order!]!
  past: [Order!]!
}
""
type MyCommission {
  lost: [Order!]!
  pending: [Order!]!
  won: [Order!]!
}
"Query object"
type Query {
  "Get self"
  self: User!
  "Get a single user"
  user(id: ID!): User!
  "Get a single user by name"
  userByName(name: String!): User!
  "Get all users"
  users(filter: UserFilter, sort: UserSort, cursor: String, limit: Int): UserPagination!
  "Get mail"
  mail(id: ID!): Mail!
  "Get all products"
  products(filter: ProductFilter, sort: ProductSort, cursor: String, limit: Int): ProductPagination!
  "Get a product"
  product(id: ID!): Product!
  "Get Categories"
  categories: [Category!]!
  "Get Category"
  category(id: ID!): Category!
  "Get Subcategory"
  subcategory(id: ID!): Subcategory!
  "Get all Orders"
  orders(filter: OrderFilter, sort: OrderSort, cursor: String, limit: Int): OrderPagination!
  "Get an Order by Id"
  order(id: ID!): Order!
  "Get myOrders by user"
  myOrders: MyOrder!
  "Get an Order by Id"
  myCommissions: MyCommission!
  "Get current Carts"
  carts: [Cart!]!
  "Get past Purchases"
  purchases: [Purchase!]!
}
"Mutation object"
type Mutation {
  "Check if the user exist if not create the user"
  login: User!
  "Edit self"
  editSelf(input: EditSelfInput!): User!
  "Add a service"
  addService(input: AddServiceInput!): User!
  "Edit a service"
  editService(input: EditServiceInput!): User!
  "Delete a service"
  deleteService(id: ID!): User!
  "Send a mail"
  sendMail(input: SendMailInput!): Mail!
  "Edit a mail"
  editMail(input: EditMailInput!): [Mail!]!
  "Follow a user"
  follow(id: ID!, follow: Boolean!): User!
  "Add a product"
  addProduct(input: AddProductInput!): Product!
  "Edit a product"
  editProduct(input: EditProductInput!): Product!
  "Delete a product"
  deleteProduct(id: ID!): Product!
  "Delete a product variant"
  addProductVariant(input: AddProductVariant!): Product!
  "Edit a product variant"
  editProductVariant(input: EditProductVariant!): Product!
  "Delete a product variant"
  deleteProductVariant(input: DeleteProductVariant!): Product!
  "Like a product"
  likeProduct(id: ID!, like: Boolean!): Product!
  "Add an Order"
  addOrder(input: AddOrderInput!): Order!
  "Edit an Order"
  editOrder(input: EditOrderInput!): Order!
  "Edit an Order"
  deleteOrder(id: ID!): Order!
  "Apply to an Order"
  applyOrder(id: ID!): Order!
  "Add item to Cart"
  addToCart(productId: ID!, variantId: ID!): [Cart!]!
  "Remove item from Cart"
  removeFromCart(productId: ID!, variantId: ID!): [Cart!]!
  "Empty items from Cart"
  emptyCart(sellerId: ID): [Cart!]!
  "Checkout item to Cart"
  checkout(sellerId: ID): [Cart!]!
}
"PriceType"
enum PriceEnum {
  "price per hour"
  HOUR
  "price for each"
  EACH
  POA
}
"AgeRestrictionEnum"
enum AgeRestrictionEnum {
  "SFW only"
  SFW_ONLY
  "all"
  ALL
  "NSFW only"
  NSFW_ONLY
}
"OtherFiltersEnum"
enum OtherFiltersEnum {
  "anime"
  ANIME
}
"SortEnum"
enum SortEnum {
  "asc"
  ASC
  "desc"
  DESC
}
""
input ProductFilter {
  ageRestriction: AgeRestrictionEnum
  maxPrice: Float
  minPrice: Float
  other: OtherFiltersEnum
  search: String
}
""
input ProductSort {
  createdDate: SortEnum
  name: SortEnum
  numLikes: SortEnum
  price: SortEnum
}
""
input UserFilter {
  search: String
}
""
input UserSort {
  name: SortEnum
  numCompletedCommissions: SortEnum
  numLikes: SortEnum
}
""
input OrderFilter {
  maxBounty: Float
  minBounty: Float
  search: String
}
""
input OrderSort {
  bounty: SortEnum
  createdDate: SortEnum
  name: SortEnum
}
""
input EditSelfInput {
  bio: String
  displayName: String
  profileImageURI: String
  status: String
  tagIds: [String!]
}
""
input AddServiceInput {
  description: String!
  name: String!
  price: Float!
  priceType: PriceEnum!
}
""
input EditServiceInput {
  description: String
  id: ID!
  name: String
  price: Float
  priceType: PriceEnum
}
""
input SendMailInput {
  body: String!
  receiverUserId: String!
  title: String!
}
""
input EditMailInput {
  id: ID!
  isRead: Boolean
}
""
input AddProductInput {
  artist: ID!
  description: String!
  images: [String!]!
  isMature: Boolean!
  name: String!
  numLikes: Int!
  subcategoryId: ID!
  tags: [ID!]!
  titleImage: String!
  vrm: String!
}
""
input EditProductInput {
  description: String
  id: ID!
  images: [String!]
  name: String
  numLikes: Int
  subcategoryId: ID
  tags: [ID!]
  titleImage: String
  vrm: String
}
""
input AddProductVariant {
  file: String!
  fileTypes: [String!]!
  name: String!
  price: Float!
  productId: ID!
}
""
input EditProductVariant {
  file: String
  fileTypes: [String!]
  id: ID!
  name: String
  price: Float
  productId: ID!
}
""
input DeleteProductVariant {
  id: ID!
  productId: ID!
}
""
input AddOrderInput {
  bounty: Float!
  description: String!
  id: ID!
  image: String!
  isDraft: Boolean!
  name: String!
  tagIds: [String!]!
}
""
input EditOrderInput {
  artistId: ID
  bounty: Float
  description: String
  id: ID!
  image: String
  isDraft: Boolean
  name: String
  tagIds: [String!]
}
